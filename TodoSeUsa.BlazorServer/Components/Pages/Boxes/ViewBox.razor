@page "/cajas/{id:int}"

@using TodoSeUsa.Application.Features.Boxes.DTOs
@using TodoSeUsa.Application.Features.Boxes.Interfaces
@using TodoSeUsa.Application.Features.Products.DTOs
@using TodoSeUsa.Application.Features.Products.Interfaces
@using TodoSeUsa.BlazorServer.Components.Pages.Products

@inject NavigationManager Navigation

@inject IBoxService BoxService
@inject IProductService ProductService

<PageLayoutSection Title="Detalles de la caja">
    <RadzenCard Style="width: 75%;">
        <div class="container p-5">
            @if (box is null)
            {
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" AlignItems="AlignItems.Center" style="margin-bottom: 1rem;">
                    <RadzenSkeleton Animation="SkeletonAnimation.Wave" Style="height: 2rem;"/>
                </RadzenStack>
                <div style="display: flex; flex-direction: column; gap: 8px;">
                    <RadzenText TextStyle="TextStyle.H6">
                        <strong>ID:</strong> <RadzenSkeleton Animation="SkeletonAnimation.Wave"/>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.H6">
                        <strong>Código:</strong> <RadzenSkeleton Animation="SkeletonAnimation.Wave" />
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.H6">
                        <strong>Ubicación:</strong> <RadzenSkeleton Animation="SkeletonAnimation.Wave" />
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.H6">
                        <strong>Cantidad de productos: </strong> <RadzenSkeleton Animation="SkeletonAnimation.Wave" />
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.H6">
                        <strong>Fecha de creación: </strong> <RadzenSkeleton Animation="SkeletonAnimation.Wave" />
                    </RadzenText>
                </div>
                <RadzenStack AlignItems="AlignItems.Center" Gap="1rem" class="rz-m-12">
                    <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" AriaLabel="Cargando detalles..." />
                    <RadzenText Text="Cargando detalles..." />
                </RadzenStack>
            }
            else
            {
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" AlignItems="AlignItems.Center" style="margin-bottom: 1rem;">
                    <RadzenButton Text="Editar" Icon="edit" ButtonStyle="ButtonStyle.Primary" Click="@EditBox" />
                </RadzenStack>
                <div style="display: flex; flex-direction: column; gap: 8px;">
                    <RadzenText TextStyle="TextStyle.H6"> <strong>ID: </strong>@box.Id</RadzenText>
                    <RadzenText TextStyle="TextStyle.H6"><strong>Código: </strong>@box.BoxCode</RadzenText>
                    <RadzenText TextStyle="TextStyle.H6"><strong>Ubicación: </strong>@box.Location</RadzenText>
                    <RadzenText TextStyle="TextStyle.H6"><strong>Cantidad de productos: </strong> @box.TotalProducts</RadzenText>
                    <RadzenText TextStyle="TextStyle.H6"><strong>Fecha de creación: </strong> @box.CreatedAt.ToString("dd/MM/yyyy HH:mm")</RadzenText>
                </div>
                    @if (box.TotalProducts > 0)
                    {
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="padding-top: 8px">
                            <RadzenToggleButton @bind-Value=@showProducts
                                                Change=@OnToggleProducts
                                                Text="@(showProducts ? "Ocultar productos" : "Mostrar productos")"
                                                ButtonStyle="ButtonStyle.Light"
                                                ToggleButtonStyle="ButtonStyle.Dark"
                                                Disabled="@isLoadingProducts"
                                                InputAttributes="@(new Dictionary<string, object>{{ "aria-label", "Mostrar productos" }})" />
                            <RadzenIcon Icon="south" />
                        </RadzenStack>
                        @if (isLoadingProducts)
                        {
                            <RadzenStack Orientation="Orientation.Vertical"
                                         AlignItems="AlignItems.Center"
                                         JustifyContent="JustifyContent.Center">
                                <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" AriaLabel="Cargando productos..." />
                                <RadzenText Text="Cargando productos..." />
                            </RadzenStack>
                        }
                        </RadzenStack>
                        @if (showProducts && products is not null)
                        {
                            <div class="d-grid d-flex justify-content-between w-100 flex-wrap mt-4 gap-3">
                                <RadzenTextBox Placeholder="Buscar producto..." @bind-Value="@searchTerm" Change="@OnSearchChanged" Style="width: 250px" class="flex-fill"/>
                                <RadzenDropDown @bind-Value="@sortOption" Data="@sortOptions" Placeholder="Ordenar por..." Change="@OnSortChanged" Style="width: 250px" class="flex-fill" />
                            </div>

                            <hr />
                            <div class="d-grid gap-3">
                            @foreach (var product in FilterAndSortProducts())
                            {
                                <div class="card">
                                    <div class="card-header">
                                        <RadzenText TextStyle="TextStyle.H6" Style="margin: 0;"><strong>Producto con ID: @product.Id</strong></RadzenText>
                                    </div>
                                    <div class="card-body d-flex justify-content-between flex-wrap-reverse">
                                        <div class="flex-grow-1">
                                            <RadzenRow Gap="2rem" JustifyContent="JustifyContent.SpaceBetween">
                                                <RadzenColumn>
                                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Categoría</RadzenText>
                                                    <RadzenText TextStyle="TextStyle.H5"><strong>@product.Category</strong></RadzenText>
                                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Descripción</RadzenText>
                                                    <RadzenText TextStyle="TextStyle.H5"><strong>@product.Description</strong></RadzenText>
                                                    @if (product.Season is not null)
                                                    {
                                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Temporada</RadzenText>
                                                        <RadzenText TextStyle="TextStyle.H5"><strong>@product.Season.ToString()</strong></RadzenText>
                                                    }
                                                </RadzenColumn>
                                                <RadzenColumn>
                                                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Precio</RadzenText>
                                                <RadzenText TextStyle="TextStyle.H5"><strong>$@product.Price</strong></RadzenText>
                                                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Estado</RadzenText>
                                                <RadzenText TextStyle="TextStyle.H5"><strong>@product.Status.ToString()</strong></RadzenText>
                                                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Ingresado el</RadzenText>
                                                    <RadzenText TextStyle="TextStyle.H5"><strong>@product.CreatedAt.ToString("dd/MM/yyyy HH:mm")</strong></RadzenText>
                                                </RadzenColumn>
                                            </RadzenRow>
                                        </div>
                                        <img src="your-image.jpg" alt="Product image" class="img-fluid" style="height: 200px; width: 200px; border: dotted;">
                                    </div>
                                    <div class="card-footer d-flex justify-content-between">
                                        <RadzenButton Icon="visibility"
                                                      ButtonStyle="ButtonStyle.Primary"
                                                      Size="ButtonSize.Small"
                                                      Text="Ver producto"
                                                      Click="@(() => Navigation.NavigateTo($"/productos/{product.Id}"))" />
        
                                    </div>
                                </div>
                            }
                            </div>
                        }
                    }
            }
            @if (errorMessageBox is not null)
            {
            <RadzenAlert Severity="AlertSeverity.Error" Summary="Error" Detail="@errorMessageBox" />
            <RadzenButton Text="Volver" Icon="arrow_back" Click="@GoBack" />
            }
            else
            {
            <RadzenText Text="@errorMessageBox" />
            }
        </div>
    </RadzenCard>
</PageLayoutSection>

@code {
    [Parameter] public int Id { get; set; }

    private BoxDto? box;
    private List<ProductDto>? products;
    private bool isLoadingProducts;
    private bool showProducts;
    private string? errorMessageBox;
    private string? searchTerm;
    private string? sortOption;

    private readonly List<string> sortOptions = new()
    {
        "Precio ascendente",
        "Precio descendente",
        "Fecha (más reciente)",
        "Fecha (más antigua)"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadBox();
    }

    private async Task LoadBox()
    {
        var result = await BoxService.GetByIdAsync(Id, CancellationToken.None);

        if (result.IsSuccess)
            box = result.Value;
        else
            errorMessageBox = result.Error.Description;
    }

    private async Task OnToggleProducts(bool value)
    {
        // Radzen passes the *new* value here (true when user toggles ON)
        showProducts = value;

        if (showProducts)
        {
            await LoadProducts();
        }
        else
        {
            products = null;
        }
    }

    private async Task LoadProducts()
    {
        if (box is null)
            return;

        isLoadingProducts = true;

        var result = await ProductService.GetProductsByBoxIdAsync(box.Id, CancellationToken.None);

        if (result.IsSuccess)
        {
            products = result.Value;
        }
        else
        {
            errorMessageBox = result.Error.Description;
        }

        isLoadingProducts = false;
    }


    private IEnumerable<ProductDto> FilterAndSortProducts()
    {
        var query = products?.AsEnumerable() ?? [];

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(p =>
                (p.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                || (p.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                || (p.Status.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                || (p.Quality.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                || (p.Season?.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
            );
        }

        query = sortOption switch
        {
            "Precio ascendente" => query.OrderBy(p => p.Price),
            "Precio descendente" => query.OrderByDescending(p => p.Price),
            "Fecha (más reciente)" => query.OrderByDescending(p => p.CreatedAt),
            "Fecha (más antigua)" => query.OrderBy(p => p.CreatedAt),
            _ => query
        };

        return query;
    }

    private void OnSearchChanged(object? value)
    {
        searchTerm = value?.ToString();
    }

    private void OnSortChanged(object? value)
    {
        sortOption = value?.ToString();
    }

    private void GoBack() => Navigation.NavigateTo("/cajas");
    private void EditBox() => Navigation.NavigateTo($"/cajas/editar/{Id}");
}