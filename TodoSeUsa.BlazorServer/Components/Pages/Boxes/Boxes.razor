@page "/cajas"

@using TodoSeUsa.Application.Common.Models
@using TodoSeUsa.Application.Features.Boxes.DTOs
@using TodoSeUsa.Application.Features.Boxes.Interfaces
@using TodoSeUsa.BlazorServer.Components.Pages.Tests
@using TodoSeUsa.BlazorServer.Helpers

@inject IBoxService boxService;
@inject DialogService DialogService;
@inject NavigationManager Navigation;

<PageLayoutSection Title="Cajas">
    <RadzenCard Style="max-width: 100%">
        <RadzenStack Gap="1rem">
            <RadzenCard Variant="Variant.Outlined">
                <FilterControls LogicalFilterValue="@logicalFilterOperator" LogicalFilterValueChanged="@(v => logicalFilterOperator = v)" LogicalFilterOnChanged="@(async () => await grid.Reload())" ResetButtonClicked="@ResetAsync" />
            </RadzenCard>
            <RadzenDataGrid @ref="grid"
                            style="height: 400px"
                            IsLoading="@isLoading"
                            TItem="BoxDto"
                            Data="@boxes"
                            Count="@count"
                            EmptyText="@GridMessage"
                            LogicalFilterOperator="@logicalFilterOperator"
                            @bind-Value="@selectedBoxes"
                            LoadData="@LoadData"
                            SelectionMode="DataGridSelectionMode.Single"
                            PageSize="5"
                            AllowSorting="true"
                            AllowFiltering="true"
                            AllowPaging="true"
                            FilterMode="FilterMode.Simple"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            GridLines="DataGridGridLines.Both"
                            PagerHorizontalAlign="HorizontalAlign.Center"
                            ClearFilterText="Limpiar"
                            ApplyFilterText="Aplicar"
                            FilterText="Filtro"
                            ContainsText="Contiene"
                            EqualsText="Equivale"
                            AndOperatorText="Y"
                            OrOperatorText="O"
                            LessThanOrEqualsText="Menor o igual que"
                            LessThanText="Menor que"
                            GreaterThanOrEqualsText="Mayor o igual que"
                            GreaterThanText="Mayor que"
                            NotEqualsText="No es igual a"
                            IsNullText="Es nulo"
                            IsNotNullText="No es nulo">
                <HeaderTemplate>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Crear una caja nueva" Click="@OpenCreateBoxDialog" />
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumn Frozen="true" Property="@nameof(BoxDto.Id)" Title="ID" TextAlign="TextAlign.Center" />

                    <RadzenDataGridColumn Property="@nameof(BoxDto.BoxCode)" Title="Código" />

                    <RadzenDataGridColumn Property="@nameof(BoxDto.TotalProducts)" Title="Cant. productos" />

                    <RadzenDataGridColumn Property="@nameof(BoxDto.Location)" Title="Ubicación" />

                    <RadzenDataGridColumn Property="@nameof(BoxDto.CreatedAt)" Title="Creada el"/>

                    <RadzenDataGridColumn Frozen="true" Sortable="false" TItem="BoxDto" Title="Acciones">
                        <Template Context="item">
                            <GridRowActionsColumn TItem="BoxDto" Item="item" OnView="@(() => ViewBox(item))" OnEdit="@(() => EditBox(item))" OnDelete="@(() => DeleteBox(item))" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenStack>
    </RadzenCard>
</PageLayoutSection>

@code {
    private RadzenDataGrid<BoxDto> grid = null!;
    private IEnumerable<BoxDto>? boxes;
    private IList<BoxDto>? selectedBoxes;
    private int count;
    private bool isLoading = false;
    private string GridMessage = "No hay cajas para mostrar.";
    private CancellationTokenSource? cts;

    void ClearSelection()
    {
        selectedBoxes = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadData(new LoadDataArgs());
    }

    private LogicalFilterOperator logicalFilterOperator = LogicalFilterOperator.Or;

    async Task LoadData(LoadDataArgs args)
    {
        if (isLoading) return;

        isLoading = true;

        cts?.Cancel();
        cts = new CancellationTokenSource();
        try
        {
            QueryItem query = new(args.Filter, args.OrderBy, args.Skip ?? 0, args.Top ?? 5);

            var result = await boxService.GetBoxesWithPaginationAsync(query, cts.Token);
            if (result.IsSuccess)
            {
                boxes = result.Value.Items;
                count = result.Value.Count;
                selectedBoxes = boxes.Take(1).ToList();
            }
            else
            {
                boxes = [];
                selectedBoxes = [];
                count = 0;
                GridMessage = result.Error.Description;
            }
        }
        catch (OperationCanceledException)
        {

        }
        finally
        {
            isLoading = false;
        }
    }

    void ViewBox(BoxDto box)
    {
        // Example 1: navigate to a details page
        Navigation.NavigateTo($"/cajas/{box.Id}");

        // Example 2 (optional): open a dialog instead
        // await DialogService.OpenAsync<YourBoxDetailsComponent>("Detalles de Caja", new Dictionary<string, object> { ["Box"] = box });
    }

    void EditBox(BoxDto box)
    {
        Navigation.NavigateTo($"/cajas/editar/{box.Id}");
    }

    async Task DeleteBox(BoxDto box)
    {
        var confirmed = await DialogService.Confirm(
            $"¿Eliminar la caja {box.BoxCode}?",
            "Confirmar eliminación",
            new ConfirmOptions { OkButtonText = "Sí", CancelButtonText = "No" });

        if (confirmed == true)
        {
            Console.WriteLine($"Deleting box {box.Id}");

            await grid.Reload();
        }
    }

    public async Task OpenCreateBoxDialog()
    {
        await DialogService.OpenAsync<CreateBox>("Crear una nueva caja",
               new Dictionary<string, object>(),
               new DialogOptions()
               {
                   Width = "50%",
                   CloseDialogOnOverlayClick = true
               });
    }

    async Task ResetAsync()
    {
        cts?.Cancel();

        grid.Reset(true);
        await grid.FirstPage(true);
    }
}
