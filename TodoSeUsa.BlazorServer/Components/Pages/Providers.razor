@page "/proveedores"

@using TodoSeUsa.Application.Common.Models
@using TodoSeUsa.Application.Features.Providers.DTOs
@using TodoSeUsa.Application.Features.Providers.Interfaces
@using TodoSeUsa.BlazorServer.Helpers

@inject IProviderService providerService;

<PageLayoutSection Title="Proveedores">
    <RadzenCard Style="max-width:100%">
        <RadzenStack Gap="1rem">
            <RadzenCard Variant="Variant.Outlined">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1.5rem" Wrap="FlexWrap.Wrap">
                    <RadzenButton Text="Resetear filtros" Click="@ResetAsync" Icon="refresh" />

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                        <RadzenLabel Text="Filtro lógico:" Component="operator" />
                        <RadzenDropDown @bind-Value="@logicalFilterOperator" TextProperty="Text" ValueProperty="Value" Name="operator" Change="@(args => grid.Reload())" Data="@RadzenFilteringHelpers.LogicalOperators" />
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                        <RadzenLabel Text="Filtro de mayúsculas/minúsculas:" Component="caseSensitivity" />
                        <RadzenDropDown @bind-Value="@filterCaseSensitivity" TextProperty="Text" ValueProperty="Value" Name="caseSensitivity" Change="@(args => grid.Reload())" Data="@RadzenFilteringHelpers.CaseSensitivities" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>
            <RadzenDataGrid style="height: 400px"
                            @ref="grid"
                            IsLoading="@isLoading"
                            TItem="ProviderDto"
                            Data="@providers"
                            Count="@count"
                            LoadData="@LoadData"
                            AllowSorting="true"
                            AllowFiltering="true"
                            AllowPaging="true"
                            FilterMode="FilterMode.Simple"
                            FilterCaseSensitivity="@filterCaseSensitivity"
                            LogicalFilterOperator="@logicalFilterOperator"
                            GridLines="@gridLines"
                            AllowColumnResize="true"
                            ColumnWidth="200px"
                            PageSize="5"
                            PagerHorizontalAlign="HorizontalAlign.Center"
                            EmptyText="@GridMessage"
                            ClearFilterText="Limpiar"
                            ApplyFilterText="Aplicar"
                            FilterText="Filtro"
                            ContainsText="Contiene"
                            EqualsText="Equivale"
                            AndOperatorText="Y"
                            OrOperatorText="O">

                <Columns>
                    <RadzenDataGridColumn Resizable="false" Property="@nameof(ProviderDto.Id)" Title="ID" Width="60px" TextAlign="TextAlign.Center" />

                    <RadzenDataGridColumn Property="@nameof(ProviderDto.CommissionPercent)" Title="Porcentaje de comisión" Width="80px" MinWidth="80px"/>

                    <RadzenDataGridColumn Property="@nameof(ProviderDto.FirstName)" Title="Nombre" Width="120px" MinWidth="120px"/>

                    <RadzenDataGridColumn Property="@nameof(ProviderDto.LastName)" Title="Apellido" Width="120px" MinWidth="120px" />

                    <RadzenDataGridColumn Property="@nameof(ProviderDto.TotalConsignments)" Title="Consignaciones" Width="120px" />

                    <RadzenDataGridColumn Property="@nameof(ProviderDto.CreatedAt)" Title="Fecha de creación" Width="120px" />
                </Columns>
            </RadzenDataGrid>
        </RadzenStack>
    </RadzenCard>
</PageLayoutSection>

@code {
    private RadzenDataGrid<ProviderDto> grid;
    private IEnumerable<ProviderDto> providers;
    private int count;
    private bool isLoading = false;
    private string GridMessage = "No hay proveedores para mostrar.";
    private CancellationTokenSource? cts;

    private LogicalFilterOperator logicalFilterOperator = LogicalFilterOperator.And;
    private FilterCaseSensitivity filterCaseSensitivity = FilterCaseSensitivity.CaseInsensitive;
    private Radzen.DataGridGridLines gridLines = Radzen.DataGridGridLines.Both;

    private async Task LoadData(LoadDataArgs args)
    {
        if (isLoading) return;

        isLoading = true;

        cts?.Cancel();
        cts = new CancellationTokenSource();
        try
        {
            QueryItem query = new(args.Filter, args.OrderBy, args.Skip ?? 0, args.Top ?? 5);

            var result = await providerService.GetProvidersWithPagination(query, cts.Token);
            if (result.IsSuccess)
            {
                providers = result.Value.Items;
                count = result.Value.Count;
            }
            else
            {
                providers = [];
                count = 0;
                GridMessage = result.Error.Description;
            }
        }
        catch (OperationCanceledException)
        {

        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ResetAsync()
    {
        cts?.Cancel();

        grid.Reset(true);
        await grid.FirstPage(true);
    }
}
