@page "/ptest"

@using TodoSeUsa.Application.Common.Models
@using TodoSeUsa.Application.Features.Products.DTOs
@using TodoSeUsa.Application.Features.Products.Interfaces

@inject IProductService productService;
@inject DialogService DialogService;
@inject NavigationManager Navigation;

<PageLayoutSection Title="Productos">
    <GenericDataGrid TItem="ProductDto"
                     Data="@products"
                     Count="@count"
                     LoadData="@LoadData"
                     OnView="@HandleViewProductAsync"
                     OnEdit="@HandleEditProductAsync"
                     OnDelete="@HandleDeleteProductAsync">
        <ChildColumns>
            <RadzenDataGridColumn TItem="ProductDto" Property="Id" Title="ID" Width="80px" />
            <RadzenDataGridColumn TItem="ProductDto" Property="ProductCode" Title="Código" Width="100px" />
            <RadzenDataGridColumn TItem="ProductDto" Property="Location" Title="Ubicación" Width="200px" />
            <RadzenDataGridColumn TItem="ProductDto" Property="CreatedAt" Title="Creada el" Width="200px" />
        </ChildColumns>
    </GenericDataGrid>
</PageLayoutSection>

@code
{
    private IEnumerable<ProductDto>? products;
    private int count;
    private bool isLoading;
    private CancellationTokenSource? cts;
    private string GridEmptyText { get; set; } = string.Empty;

    private async Task LoadData(LoadDataArgs args)
    {
        if (isLoading) return;

        isLoading = true;
        cts?.Cancel();
        cts = new CancellationTokenSource();

        try
        {
            var query = new QueryItem(args.Filter, args.OrderBy, args.Skip ?? 0, args.Top ?? 5);

            var result = await productService.GetProductsWithPaginationAsync(query, cts.Token);
            if (result.IsSuccess)
            {
                products = result.Value.Items;
                count = result.Value.Count;
            }
            else
            {
                products = [];
                count = 0;
                GridEmptyText = "No hay cajas para mostrar";
            }
        }
        catch (OperationCanceledException)
        {
            // ignore cancelled loads
        }
        finally
        {
            isLoading = false;
        }
    }

    // private void OnGridReady(RadzenDataGrid<ProductDto> instance)
    // {
    //     grid = instance;
    // }

    private void HandleViewProductAsync(ProductDto product)
    {
        Navigation.NavigateTo($"/cajas/{product.Id}");
    }

    private void HandleEditProductAsync(ProductDto product)
    {

        Navigation.NavigateTo($"/cajas/editar/{product.Id}");
    }

    private async void HandleDeleteProductAsync(ProductDto product)
    {
        var confirmed = await DialogService.Confirm(
            $"¿Eliminar la caja {product.Id}?",
            "Confirmar eliminación",
            new ConfirmOptions { OkButtonText = "Sí", CancelButtonText = "No" });

        if (confirmed == true)
        {
            Console.WriteLine($"Deleting product {product.Id}");

            // await grid.Reload();
        }
    }
}