@page "/reservas"

@using TodoSeUsa.Application.Common.Models
@using TodoSeUsa.Application.Features.Reservations.DTOs
@using TodoSeUsa.Application.Features.Reservations.Interfaces
@using TodoSeUsa.BlazorServer.Helpers

@inject IReservationService reservationService;


<PageLayoutSection Title="Consignaciones">
    <RadzenCard Style="max-width: 100%">
        <RadzenStack Gap="1rem">
            <RadzenCard Variant="Variant.Outlined">
                <FilterControls LogicalFilterValue="@logicalFilterOperator" LogicalFilterValueChanged="@(v => logicalFilterOperator = v)" LogicalFilterOnChanged="@(async () => await grid.Reload())" ResetButtonClicked="@ResetAsync" />
            </RadzenCard>

        <RadzenDataGrid style="height: 400px"
                        @ref="grid"
                        IsLoading="@isLoading"
                        TItem="ReservationDto"
                        Data="@reservations"
                        Count="@count"
                        LoadData="@LoadData"
                        AllowSorting="true"
                        AllowFiltering="true"
                        AllowPaging="true"
                        AllowColumnResize="true"
                        FilterMode="FilterMode.Simple"
                        FilterCaseSensitivity="@filterCaseSensitivity"
                        LogicalFilterOperator="@logicalFilterOperator"
                        GridLines="@gridLines"
                        PageSize="5"
                        PagerHorizontalAlign="HorizontalAlign.Center"
                        EmptyText="No hay consignaciones para mostrar."
                        ClearFilterText="Limpiar"
                        ApplyFilterText="Aplicar"
                        FilterText="Filtro"
                        ContainsText="Contiene"
                        EqualsText="Equivale"
                        AndOperatorText="Y"
                        OrOperatorText="O">

            <Columns>
                <RadzenDataGridColumn Frozen="true" Property="@nameof(ReservationDto.Id)" Title="ID" Width="80px" MinWidth="80px" TextAlign="TextAlign.Center" />

                <RadzenDataGridColumn Property="@nameof(ReservationDto.TotalProducts)" Title="Productos totales" Width="120px" MinWidth="120px" />

                <RadzenDataGridColumn Property="@nameof(ReservationDto.Status)" Title="Estado" Width="120px" MinWidth="120px" />

                <RadzenDataGridColumn Property="@nameof(ReservationDto.FirstName)" Title="Nombre" Width="120px" />

                <RadzenDataGridColumn Property="@nameof(ReservationDto.LastName)" Title="Apellido" Width="120px" />

                <RadzenDataGridColumn Property="@nameof(ReservationDto.DateIssued)" Title="Emitida el" Width="120px" MinWidth="120px" />

                <RadzenDataGridColumn Property="@nameof(ReservationDto.ExpiresAt)" Title="Expira el" Width="120px" />


                <RadzenDataGridColumn Property="@nameof(ReservationDto.ClientId)" Title="ID del cliente" Width="120px" MinWidth="120px" />

                <RadzenDataGridColumn Property="@nameof(ReservationDto.CreatedAt)" Title="Creada el" Width="120px" />
            </Columns>
        </RadzenDataGrid>
    </RadzenStack>
    </RadzenCard>
</PageLayoutSection>


@code {
    private RadzenDataGrid<ReservationDto> grid;
    private IEnumerable<ReservationDto> reservations;
    private int count;
    private bool isLoading = false;
    private string GridMessage = "No hay reservas para mostrar."; 
    private CancellationTokenSource? cts;

    private LogicalFilterOperator logicalFilterOperator = LogicalFilterOperator.And;
    private FilterCaseSensitivity filterCaseSensitivity = FilterCaseSensitivity.CaseInsensitive;
    private Radzen.DataGridGridLines gridLines = Radzen.DataGridGridLines.Both;

    private async Task LoadData(LoadDataArgs args)
    {
        if(isLoading) return;

        isLoading = true;

        cts?.Cancel();
        cts = new CancellationTokenSource();
        try
        {
            QueryItem query = new(args.Filter, args.OrderBy, args.Skip ?? 0, args.Top ?? 5);

            var result = await reservationService.GetReservationsWithPagination(query, cts.Token);
            if (result.IsSuccess)
            {
                reservations = result.Value.Items;
                count = result.Value.Count;
            }
            else
            {
                reservations = [];
                count = 0;
                GridMessage = result.Error.Description;
            }
        }
        catch (OperationCanceledException)
        {

        }
        finally
        {
            isLoading = false;
        }

    }

    private async Task ResetAsync()
    {
        cts?.Cancel();

        grid.Reset(true);
        await grid.FirstPage(true);
    }
}
